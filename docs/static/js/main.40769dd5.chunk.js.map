{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","data","maxResult","loadedJSON","err","res","_this","setState","body","getData","newValue","newMaxResult","params","key","part","q","type","order","maxResults","request","get","query","end","plusResult","prevProps","this","e","_this2","react_default","a","createElement","className","App_VideoView","onClick","App_SearchBox","onChange","valueChange","React","Component","VideoView","_this3","props","nextProps","event","target","pauseVideo","opts","height","window","innerHeight","width","innerWidth","playerVars","autoplay","Videos","i","push","YouTube","videoId","items","id","onReady","SearchBox","_this4","_this5","placeholder","handleChange","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40769dd5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport request from 'superagent'\nimport YouTube from 'react-youtube'\n\nexport default class App extends React.Component {\n  state = {\n    value: '',\n    data: null,\n    maxResult: 1\n  }\n  loadedJSON = (err, res) => this.setState({data:res.body})\n  getData = (newValue,newMaxResult) => {\n    const URI = 'https://www.googleapis.com/youtube/v3/search'\n    const KEY = 'AIzaSyDji1ygZa4WtFxp6PrjLDUSRMFqk7ZQE80'\n    let params = {\n      'key':KEY,\n      'part': 'snippet',\n      'q': newValue,\n      'type': 'video',\n      'order': 'relevance',\n      'maxResults': newMaxResult\n    }\n    request.get(URI)\n      .query(params)\n      .end(this.loadedJSON)\n  }\n  componentDidUpdate (prevProps) {\n    if (this.state.value !== prevProps.value) {\n      this.getData(this.state.value, prevProps.maxResult)\n    }\n  }\n  valueChange (e) {\n    const newValue = e.value\n    this.setState({\n      value: newValue\n    })\n  }\n  plusResult = () => this.setState({ maxResult: this.state.maxResult + 1})\n  render () {\n    return (\n      <div className=\"App\">\n        <VideoView className=\"video-view\"\n          data = {this.state.data}\n          maxResult = {this.state.maxResult}\n        />\n        <button\n          type=\"button\"\n          onClick={this.plusResult}\n        >+{this.state.maxResult}\n        </button>\n        <SearchBox className=\"search-box\"\n          onChange = {e => {this.valueChange(e)}}\n        />\n      </div>\n    )\n  }\n}\n\nclass VideoView extends React.Component {\n  state = {\n    data: this.props.data,\n    maxResult: this.props.maxResult\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.state.data) {\n      this.setState({\n        data: nextProps.data\n      })\n    }\n    if (nextProps.maxResult !== this.state.maxResult) {\n      this.setState({\n        maxResult: nextProps.maxResult\n      })\n    }\n  }\n  _onReady (event) {\n    // access to player in all event handlers via event.target\n    event.target.pauseVideo()\n  }\n  render () {\n    const opts = {\n      height: window.innerHeight,\n      width: window.innerWidth,\n      playerVars: { // https://developers.google.com/youtube/player_parameters\n        autoplay: 1\n      }\n    }\n    let Videos = []\n    if (this.state.data != null) {\n      for (let i = 0; i < this.state.maxResult; i++) {\n        Videos.push(\n          <YouTube\n            videoId={this.state.data.items[i].id.videoId}\n            opts={opts}\n            onReady={this.onReady}\n          />\n        )\n      }\n    }\n    return (\n      <div className=\"videos\">\n        {Videos}\n      </div>\n    )\n  }\n}\n\nclass SearchBox extends React.Component {\n  state = {\n    value: this.props.value\n  }\n  handleChange (e) {\n    const newValue = e.target.value\n    this.setState({\n      value: newValue\n    })\n    if (this.props.onChange) {\n      this.props.onChange({\n        target: this,\n        value: newValue\n      })\n    }\n  }\n  componentWillReceiveProps (nextProps) {\n    this.setState({value: nextProps.value})\n  }\n  render () {\n    return (\n      <div className=\"search-box\">\n        <input\n          type=\"text\"\n          placeholder='Search'\n          value={this.state.value}\n          onChange={e => this.handleChange(e)}\n        />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}